let goose = require('goose')
		mongoose = require('mongoose')
		ctm = require('collection-to-model')
		smartOpts = require('smartOpts')
//\\ requires

let auto = function () {

	this.addrealm = function (realm, model, find) {
			var stream = model.find(find).cursor()
			let arbTotalCount = 0
			stream.on('data', function (doc) {
					arbTotalCount += 1
					console.log("this is the arbTotalCount: ")
					console.log(arbTotalCount)
					if (!doc.realms) {
							doc.realms = []
							doc.realms.push(realm)
							doc.save(function (err) {
									if (err) {
											console.error("there was an error pushing the realm into the realm list")
											console.error(err)
									} else {
											console.log("successfully saved new realm data")
									}
							})
					} else if (doc.realms.indexOf(realm) < 0) {
							doc.realms.push(realm)
							doc.save(function (err) {
									if (err) {
											console.error("there was an error pushing the realm into the realm list")
											console.error(err)
									} else {
											console.log("successfully saved new realm data")
									}
							})
					}

			}).on('error', function (err) {
					console.error("there was an error in the stream")
					console.error(err)
			}).on('close', function () {
					console.log("updated all posts")
			})
	}

	this.countCommenters = function (model) {
			var stream = model.find().cursor()
			stream.on('data', function (doc) {
					arbTotalCount += 1
					if (logging) {
							console.log(arbTotalCount)
							// console.log(doc.comments)
							// console.log(doc)
					}
					if (doc.comments !== null) {

							var commenterIds = []
							for (i = 0; i < doc.comments.length; i++) {
									arbTotalCount += 1
									if (commenterIds.indexOf(doc.comments[i].from.id) < 0) {
											// Count active members
											if (uniqueCommenters.indexOf(doc.comments[i].from.id) < 0) {
													uniqueCommenters.push(doc.comments[i].from.id)
											}
											// Put commenterId into commenterIds database to register the unique id
											commenterIds.push(doc.comments[i].from.id)
											if (doc.commenters.indexOf(doc.comments[i].from) < 0) {
													doc.commenters.push(doc.comments[i].from)
											}
									}
									if (i == doc.comments.length - 1) {
											doc.commenters = commenters
											doc.save(function (err) {
													if (err) {
															console.error("there was an error when saving the document after applying commenters script: ")
															console.log(err)
													}
											})
									}
							}
							if (logging) {
									console.log("this is the number of commenters: ")
									console.log(doc.commenters.length)
							}
					}


			}).on('error', function (err) {
					console.error("there was an error in the stream when calculating unique commenters")
					console.error(err)
			}).on('close', function () {
					console.log("total unique commenters was %s", uniqueCommenters.length)
					console.log("updated all posts")
			})
	}

	this.addOwner = function (thingModel) {
			let stream = thingModel.find({
					thing: {
							$exists: true
					}
			}).cursor()
			arbTotalCount = 0
			stream.on('data', (postDoc) => {
					arbTotalCount += 1
					console.log("this is the arbTotalCount: %s", arbTotalCount)
					postDoc.owner = undefined
					saveRecursively({
							model: postDoc,
							max: 3
					})
			}).on('error', function (err) {
					console.error("there was an error in the stream")
					console.error(err)
			}).on('close', function () {
					console.log("updated all posts")
			})
	}

	this.renameProperties = function (opts) {
			/**
			 * @param opts is an object of options for this function
			 * @param opts.model is the mongoose model of the schema we want to
			 * modify a little bit
			 * @param opts.properties is a list of properties that we want to rename
			 * @param opts.properties[n] comes in the format ["fromProperty", "toProperty"]
			 */

			opts.model.find.cursor()
					.on('data', thing => {
							for (var i = 0; i < opts.properties.length; i++) {
									var oldPropertiesValue = thing[opts.properties[i][0]]
									if (oldPropertiesValue) {
											thing[opts.properties[i][1] = oldPropertiesValue]
									}
							}
							thing.save(err => {
									if (err) {
											console.error(err)
									}
							})
					})
					.on('error', err => {
							console.error(err)
					})
					.on('close', done => {
							console.log('wooo, done renaming properties')
					})
	}

	this.addRealmToNamesConditionally = function (model, pairs) {
			/**
			 * @param model is the mongoose model of the schema we want to
			 * modify a little bit
			 * @param pairs is a list of pairs that we want to rename
			 * @param pairs[n] comes in the format ["ifRealm", "addedName"]
			 */
			console.log(model)
			model.find().cursor()
					.on('data', doc => {
							console.log('data')
							console.log(doc)
							for (var i = 0; i < pairs.length; i++) {
									if (doc.realms.indexOf(pairs[i][0] >= 0)) {
											if (doc.names.indexOf(pairs[i][1]) < 0) {
													doc.names.push(pairs[i][1])
											}
									}
							}
							doc.save(err => {
									if (err) {
											console.error(err)
									}
							})
					})
					.on('error', err => {
							console.error(err)
					})
					.on('close', done => {
							console.log('wooo, done renaming pairs')
					})
	}

	this.convertOldPostDocumentsToThings = function (thingModel, oldPostCollectionName) {
			/**
			 * @param thingModel is the model we use for our things
			 * @param oldPostCollectionName is a string we use to create a new model so we can
			 * get the old data
			 */

			let model = ctm(oldPostCollectionName)

			console.log(model)

			model.find().cursor()
					.on('data', data => {
							console.log(data)
					})
					.on('error', err => {
							console.error(err)
					})
					.on('close', close => {
							console.log('done mate')
					})

	}

	this.saveFbDataAsJson = function (thingModel) {
			/**
			 * @param thingModel is the model we use for our things
			 */


			thingModel.find().cursor()
					.on('data', data => {
							console.log(data)
							if (data.properties.fbData) {
									data.json = fbData
									data.properties = []
									data.save(err => {
											if (err) {
													console.error(err)
											}
									})
							}

					})
					.on('error', err => {
							console.error(err)
					})
					.on('close', close => {
							console.log('done mate')
					})

	}

	this.transformStringPropertyToList = function (model, property, targetListProperty, append = true) {

			/**
			 * @param model is the model we create a stream of data out of
			 * @param property is the string typed property who's data we want to turn into list format
			 * @param targetListProperty is the list typed property where we want to store the source string
			 * @param append default = true, is an option to define whether we append the source string
			 * or create a new list with just the 0 index = source string
			 */

			model.find().cursor()
				.on('data', data => {
						console.log(data)
						if (data[property]) {
								if (append && data[targetListProperty]) {
										if(data[targetListProperty].indexOf(data[property]) < 0){
												data[targetListProperty].push(data[property])
										}
								} else {
										data[targetListProperty] = [data[property]]
								}
								data.save(err=>{
										if(err){
												console.error(err)
										}
								})
						}
						console.log(data)
				})
				.on('error', err => {
						console.error(err)
				})
				.on('close', close => {
						console.log('done mate')
				})
	}

	this.fixTitles = function (model, ifName) {
		model.find().cursor()
			.on('data', data => {
					console.log(data)
					if(data.names.indexOf(ifName) >= 0){
						data.title = ifName
					}
					data.save(err=>{
						if(err){
							console.error(err)
						}
					})
					
					console.log(data)
			})
			.on('error', err => {
					console.error(err)
			})
			.on('close', close => {
					console.log('done mate')
			})
  }
  
	this.addUniqueTitleProperty = function (model, ifTitle) {
		model.find().cursor()
			.on('data', data => {
					console.log(data)
					if(data.title == ifTitle){
						let property = new model({
              title: 'uniques',
              list: ['title']
            })
            smartOpts.pushOpt(property._id, data.properties)
            property.save(err=>{
              if(err){
                console.error(err)
              }
            })
					}
					data.save(err=>{
						if(err){
							console.error(err)
						}
					})
					
					console.log(data)
			})
			.on('error', err => {
					console.error(err)
			})
			.on('close', close => {
					console.log('done mate')
			})
	}

	this.stream = function (model, fun=false) {
		model.find().cursor()
				.on('data', data => {
						console.log(data)
						if(fun){
								fun(data)
						}
						console.log(data)
				})
				.on('error', err => {
						console.error(err)
				})
				.on('close', close => {
						console.log('done mate')
				})
	}
}

module.exports = new auto