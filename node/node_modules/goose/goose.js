let auto = require('auto')
let goose = function () {

    this.updateSchema = function (model) {
        /**
         * all this function does is take a schema, look up all documents in relation
         * to the schema, and resave them, ensuring that documents that were saved with
         * an old schema are compatible with the new schema
         * 
         * This doesn't work very well because it doesn't have any custom handling for
         * property name changes or anything like that
         * 
         * @param model is the schema model
         * 
         */
        var stream = model.find().cursor()
        arbTotalCount = 0
        newModels = []

        stream.on('data', function (doc) {
            arbTotalCount += 1
            console.log("this is the arbTotalCount: ")
            console.log(arbTotalCount)
            doc.remove()
            let newDoc = new model(doc.toJSON())
            newModels.push(newDoc)

        }).on('error', function (err) {
            console.error("there was an error in the stream")
            console.error(err)
        }).on('close', function () {
            console.log("updated all posts")
            newModels.forEach(newDoc => {
                console.log("saving newDoc")
                console.log(newDoc)
                newDoc.save(function (err) {
                    if (err) {
                        console.error("there was an error pushing the realm into the realm list")
                        console.error(err)
                    } else {
                        console.log("saved the new post successfully")

                    }
                })
            })
        })
    }

    this.convertToThing = function (postModel, thingModel) {
        let stream = postModel.find({
            type: 'fbPost'
        }).cursor()
        arbTotalCount = 0
        stream.on('data', (postDoc) => {
            arbTotalCount += 1
            console.log("this is the arbTotalCount: %s", arbTotalCount)
            //use when comments.data is full of facebook id formats
            let thing = ''
            realm = ''
            let newThing = new thingModel({
                description: postDoc.fbData.message,
                thing: 'facebook post',
                names: ['post'],
                realms: ["facebook", 'posts', "all", "philosophy", "things"],
                properties: {
                    fbData: postDoc.fbData
                },
                source: 'https://www.facebook.com/groups/filosoph/'
            })
            for (let edge of fbconf.postEdges) {
                convertAndSaveEdge(edge, postDoc, newThing, postModel, thingModel)
            }

            // else {
            //     console.log(postDoc.comments.data.length)
            //     console.log("postDoc.comments.data.length")
            //     console.log(postDoc._id)
            // }

        }).on('error', function (err) {
            console.error("there was an error in the stream")
            console.error(err)
        }).on('close', function () {
            console.log("updated all posts")
        })
    }

    this.convertAndSaveEdge = function (edge, postDoc, thingDoc, postModel, thingModel) {
        if (edge == 'comments') {
            if (postDoc.comments.data.length > 0) {
                Promise.map(postDoc.comments.data, commentId => {
                        return postModel.findOne({
                            "_id": commentId
                        })
                    })
                    .then(commentDocs => {
                        if (commentDocs.length > 0) {
                            console.log(commentDocs)
                            let newCommentInventory = new thingModel({
                                thing: 'facebook comments',
                                names: ['inventory'],
                                realms: ["facebook", 'posts', "all", "philosophy", "things", "comments"],
                                uniques: {
                                    thing: true
                                },
                                parents: [thingDoc._id]
                            })
                            thingDoc.things.push(newCommentInventory._id)
                            for (comment of commentDocs) {
                                if (comment) {
                                    let newComment = new thingModel({
                                        thing: 'facebook comment',
                                        description: comment.fbData.message,
                                        realms: ["facebook", 'posts', "all", "philosophy", "things", "comments"],
                                        parents: [thingDoc._id, newCommentInventory._id],
                                        properties: {
                                            fbData: comment.fbData
                                        },
                                        source: 'https://www.facebook.com/groups/filosoph/',

                                    })
                                    newCommentInventory.things.push(newComment._id)
                                    for (let edge of fbconf.commentEdges) {
                                        convertAndSaveEdge(edge, comment, newComment, postModel, thingModel)
                                    }
                                    newComment.save(err => {
                                        if (err) {
                                            console.error(err)
                                            console.error("there was an error saving the new comment thing")
                                            console.error("trying to save again")
                                            newComment.save(err => {
                                                if (err) {
                                                    console.error("there was an error saving the new comment thing")
                                                    console.error(err)
                                                }
                                            })
                                        } else {
                                            console.log("successfully saved new comment thing doc")
                                        }
                                    })
                                }
                            }
                            newCommentInventory.save(err => {
                                if (err) {
                                    console.error(err)
                                    console.error("there was an error saving the new commentInventory")
                                    console.error("trying to save again")
                                    newCommentInventory.save(err => {
                                        if (err) {
                                            console.error("there was an error saving the new commentInventory")
                                            console.error(err)
                                        }
                                    })
                                } else {
                                    console.error("successfully saved the new commentInventory")
                                }
                            })
                            thingDoc.save(err => {
                                if (err) {
                                    console.error(err)
                                    console.error("there was an error saving the new thingDoc that was a comment")
                                    console.error("trying to save again")
                                    thingDoc.save(err => {
                                        if (err) {
                                            console.error("there was an error saving the new thingDoc that was a comment")
                                            console.error(err)
                                        }
                                    })
                                } else {
                                    console.error("successfully saved the new thingDoc that was a comment")
                                }
                            })
                        } else {
                            thingDoc.save(err => {
                                if (err) {
                                    console.error(err)
                                    console.error("there was an error saving the new thingDoc that was a comment")
                                    console.error("trying to save again")
                                    thingDoc.save(err => {
                                        if (err) {
                                            console.error("there was an error saving the new thingDoc that was a comment")
                                            console.error(err)
                                        }
                                    })
                                } else {
                                    console.error("successfully saved the new thingDoc that was a comment")
                                }
                            })
                        }
                    })
            }
        } else {
            if (postDoc[edge].data.length > 0) {
                let newEdgeThingInventory = new thingModel({
                    thing: "facebook " + edge,
                    names: ['inventory'],
                    realms: ["facebook", "all", "philosophy", "things", edge],
                    source: 'https://www.facebook.com/groups/filosoph/',
                    parents: [thingDoc._id],
                    uniques: {
                        thing: true
                    }
                })
                console.log('postDoc')
                console.log(postDoc)
                console.log('edge')
                console.log(edge)
                for (let data of postDoc[edge].data) {
                    let newEdgeThing = new thingModel({
                        thing: "facebook " + edge.slice(0, -1),
                        names: ['inventory'],
                        realms: ["facebook", "all", "philosophy", "things", edge],
                        source: 'https://www.facebook.com/groups/filosoph/',
                        properties: {
                            fbData: data
                        },
                        parents: [thingDoc._id, newEdgeThingInventory._id]
                    })
                    newEdgeThingInventory.things.push(newEdgeThing._id)
                    newEdgeThing.save(err => {
                        if (err) {
                            console.error(err)
                            console.error("there was an error saving the new newEdgeThing")
                            console.error("trying to save again")
                            newEdgeThing.save(err => {
                                if (err) {
                                    console.error("there was an error saving the new newEdgeThing")
                                    console.error(err)
                                }
                            })
                        } else {
                            console.error("successfully saved the new newEdgeThing")
                        }
                    })
                }
                newEdgeThingInventory.save(err => {
                    if (err) {
                        console.error(err)
                        console.error("there was an error saving the new newEdgeThingInventory")
                        console.error("trying to save again")
                        newEdgeThingInventory.save(err => {
                            if (err) {
                                console.error("there was an error saving the new newEdgeThingInventory")
                                console.error(err)
                            }
                        })
                    } else {
                        console.error("successfully saved the new newEdgeThingInventory")
                    }
                })
                thingDoc.save(err => {
                    if (err) {
                        console.error(err)
                        console.error("there was an error saving the new thingDoc that was edge data")
                        console.error("trying to save again")
                        thingDoc.save(err => {
                            if (err) {
                                console.error("there was an error saving the new thingDoc that was edge data")
                                console.error(err)
                            }
                        })
                    } else {
                        console.error("successfully saved the new thingDoc that was edge data")
                    }
                })
            }
        }
    }

    this.renameProperties = function (model, properties) {
        /**
         * @param model is the mongoose model of the schema we want to
         * modify a little bit
         * @param properties is a list of properties that we want to rename
         * @param properties[n] comes in the format ["fromProperty", "toProperty"]
         */
        console.log(model)
        model.find().cursor()
            .on('data', doc => {
                console.log('data')
                console.log(doc)
                for (var i = 0; i < properties.length; i++) {
                    var jsonDoc = doc.toJSON()
                    console.log('jsonDoc')
                    console.log(jsonDoc)
                    console.log(properties[i][0])
                    var oldPropertiesValue = jsonDoc[properties[i][0]]
                    console.log(oldPropertiesValue)
                    if (oldPropertiesValue) {
                        doc.set(properties[i][1], oldPropertiesValue)
                    }
                }
                doc.save(err=>{
                    if(err){
                        console.error(err)
                    }
                })
            })
            .on('error', err=>{
                console.error(err)
            })
            .on('close', done=>{
                console.log('wooo, done renaming properties')
            })
    }
    
    this.undefineProperties = function (model, properties) {
        /**
         * @param model is the mongoose model of the schema we want to
         * modify a little bit
         * @param properties is a list of properties that we want to rename
         * @param properties[n] comes in the format "property"
         */
        console.log(model)
        model.find().cursor()
            .on('data', doc => {
                console.log('data')
                console.log(doc)
                for (var i = 0; i < properties.length; i++) {
                    doc.set(properties[i], undefined, {strict: false})
                }
                doc.save(err=>{
                    if(err){
                        console.error(err)
                    }
                })
            })
            .on('error', err=>{
                console.error(err)
            })
            .on('close', done=>{
                console.log('wooo, done renaming properties')
            })
    }
}

module.exports = new goose